let rec merge (l : int list) (m : int list) =
  match l, m with
  | [], _ -> m
  | _, [] -> l
  | a :: ls, b :: ms ->
    if a < b then
      a :: (merge ls m)
    else
      b :: (merge l ms)
[@@adm l, m];;

assert((merge [1;2;3] [4;5;6]) = [1;2;3;4;5;6]);;

merge [1;4;7] [2;3;5;6];;

lemma merge_sum l1 l2 = List.length(merge l1 l2) = List.length l1 + List.length l2 [@@auto][@@rw];;

let rec odds l =
  match l with
  | [] -> []
  | [x] -> [x]
  | x :: y :: rst -> x :: odds rst;;

odds [1;2;3;4;5;6;7];;

let rec evens l =
  match l with
  | [] -> []
  | [x] -> []
  | x :: y :: rst -> y :: evens rst;;

evens [1;2;3;4;5;6];;

lemma odds_even_totality l = List.length l = List.length (evens l) + List.length (odds l) [@@auto] ;;

let merge_sort_measure x = 
  Ordinal.of_int (List.length x);;

theorem odds_len_1 x =
x <> [] && List.tl x <> [] ==> (List.length (odds x) [@trigger]) < List.length x
[@@induct functional odds] [@@forward_chaining];;

let rec merge_sort l =
  match l with
  | [] -> []
  | [_] -> l
  | _ :: ls -> merge (merge_sort (odds l)) (merge_sort (odds ls))
[@@measure merge_sort_measure l];;

(* # Proving merge sort correct *)

let rec is_sorted l =
  match l with
  | [] | [_] -> true
  | a :: b :: ls -> 
    if a <= b then is_sorted (b :: ls)
    else false;;

theorem merge_sort_sorts l = is_sorted (merge_sort l) [@@induct];;

(* # Proving that Merge sort contains the right elements *)

let rec num_occurs x l =
  match l with
  | [] -> 0
  | y :: ys ->
    if (x = y) then 1 + num_occurs x ys
    else num_occurs x ys;;

let is_subset l1 l2 = List.for_all (fun x -> num_occurs x l1 = num_occurs x l2) l1;; 

let same_elements l1 l2 = is_subset l1 l2 && is_subset l2 l1;;

(*
theorem same_elements_correct l = same_elements l l = true [@@induct];;
*)

(* theorem correct_elements l = List.for_all (fun x -> num_occurs x l = num_occurs x (merge_sort l)) (merge_sort l);; *)
(*
verify (fun correct_elements l -> List.for_all (fun x -> num_occurs x l = num_occurs x (merge_sort l)) (merge_sort l)) [@@induct];;
*)